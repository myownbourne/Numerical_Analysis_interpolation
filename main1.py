from Lagrange_Interpolation import *
from objfun import *
from data_construction import *
import matplotlib.pyplot as plt

def main():
    #1.y=|x|+1/(1+25*x*x) x in [-0.5,0.5]
    data10_1=equidistant_nodes(-0.5,0.5,10,1)
    data16_1=equidistant_nodes(-0.5,0.5,16,1)
    data20_1=equidistant_nodes(-0.5,0.5,20,1)
    x1=np.arange(-0.5,0.51,0.01)
    y10_1=Lagrange_Interpolation_Polynomial(x1,data10_1)
    y16_1=Lagrange_Interpolation_Polynomial(x1,data16_1)
    y20_1=Lagrange_Interpolation_Polynomial(x1,data20_1)
    y_true_1=objfun1(x1)

    f, ax = plt.subplots(2, 2)
    plt.tight_layout() 
    f.suptitle('y=|x|+1/(1+25*x*x), x in [-0.5,0.5]',fontsize=9,color='b',x=0.52,y=0.51)

    ax[0][0].plot(x1,y_true_1,'b',label='Lagrange Polynomial')
    ax[0][1].plot(x1,y10_1,'r',label='objtive function')
    ax[0][1].plot(x1,y_true_1,'b',label='Lagrange Polynomial')
    ax[1][0].plot(x1,y16_1,'r',label='Lagrange Polynomial')
    ax[1][0].plot(x1,y_true_1,'b',label='objtive function')
    ax[1][1].plot(x1,y20_1,'r',label='Lagrange Polynomial')
    ax[1][1].plot(x1,y_true_1,'b',label='objtive function')

    ax[0][0].set_title('objfun',fontsize=9,color='r')
    ax[0][1].set_title('n=10',fontsize=9,color='r')
    ax[1][0].set_title('n=16',fontsize=9,color='r')
    ax[1][1].set_title('n=20',fontsize=9,color='r')
    plt.legend()
    plt.show()

    print('y=|x|+1/(1+25*x*x), x in [-0.5,0.5], when x = 0.05:')
    print()
    print('n   f(0.05)  L_n(0.05)   error')
    f1=objfun1(0.05)
    L10_1=Lagrange_Interpolation_Polynomial(0.05,data10_1)
    L16_1=Lagrange_Interpolation_Polynomial(0.05,data16_1)
    L20_1=Lagrange_Interpolation_Polynomial(0.05,data20_1)
    print('---------------------------------')
    print(10,'%.3e' % f1, '%.3e' % L10_1,'%.3e' % abs(f1-L10_1))
    print('---------------------------------')
    print(16,'%.3e' % f1,'%.3e' % L16_1,'%.3e' % abs(f1-L16_1))
    print('---------------------------------')
    print(20,'%.3e' % f1,'%.3e' % L20_1,'%.3e' % abs(f1-L20_1))
    print('---------------------------------')



    #2.y=|x|+1/(1+25*x*x) x in [-5,5]
    data10_1_1=equidistant_nodes(-5,5,10,1)
    data16_1_1=equidistant_nodes(-5,5,16,1)
    data20_1_1=equidistant_nodes(-5,5,20,1)
    x11=np.arange(-5,5.01,0.01)
    y10_1_1=Lagrange_Interpolation_Polynomial(x11,data10_1_1)
    y16_1_1=Lagrange_Interpolation_Polynomial(x11,data16_1_1)
    y20_1_1=Lagrange_Interpolation_Polynomial(x11,data20_1_1)
    y_true_1_1=objfun1(x11)

    f, ax = plt.subplots(2, 2)
    plt.tight_layout() 
    f.suptitle('y=|x|+1/(1+25*x*x), x in [-5,5]',fontsize=9,color='b',x=0.52,y=0.51)
    ax[0][0].plot(x11,y_true_1_1,'b')
    ax[0][1].plot(x11,y10_1_1,'r')
    ax[0][1].plot(x11,y_true_1_1,'b')
    ax[1][0].plot(x11,y16_1_1,'r')
    ax[1][0].plot(x11,y_true_1_1,'b')
    ax[1][1].plot(x11,y20_1_1,'r',label='Lagrange Polynomial')
    ax[1][1].plot(x11,y_true_1_1,'b',label='objtive function')
    ax[0][0].set_title('objfun',fontsize=9,color='r')
    ax[0][1].set_title('n=10',fontsize=9,color='r')
    ax[1][0].set_title('n=16',fontsize=9,color='r')
    ax[1][1].set_title('n=20',fontsize=9,color='r')
    plt.legend()
    plt.show()

    print()
    print('y=|x|+1/(1+25*x*x), x in [-5,5], when x = 0.5:')
    print()
    print('n   f(0.5)  L_n(0.5)   error')
    f11=objfun1(0.5)
    L10_1_1=Lagrange_Interpolation_Polynomial(0.5,data10_1_1)
    L16_1_1=Lagrange_Interpolation_Polynomial(0.5,data16_1_1)
    L20_1_1=Lagrange_Interpolation_Polynomial(0.5,data20_1_1)
    print('---------------------------------')
    print(10,'%.3e' % f11, '%.3e' % L10_1_1,'%.3e' % abs(f11-L10_1_1))
    print('---------------------------------')
    print(16,'%.3e' % f11,'%.3e' % L16_1_1,'%.3e' % abs(f11-L16_1_1))
    print('---------------------------------')
    print(20,'%.3e' % f11,'%.3e' % L20_1_1,'%.3e' % abs(f11-L20_1_1))
    print('---------------------------------')

    #3.y=x/(1+x**4) x in [-5,5]
    data10_2=equidistant_nodes(-5,5,10,2)
    data16_2=equidistant_nodes(-5,5,16,2)
    data20_2=equidistant_nodes(-5,5,20,2)
    x2=np.arange(-5,5.01,0.01)
    y10_2=Lagrange_Interpolation_Polynomial(x2,data10_2)
    y16_2=Lagrange_Interpolation_Polynomial(x2,data16_2)
    y20_2=Lagrange_Interpolation_Polynomial(x2,data20_2)
    y_true_2=objfun2(x2)

    f, ax = plt.subplots(2, 2)
    plt.tight_layout() 
    f.suptitle('y=x/(1+x**4), x in [-5,5]',fontsize=9,color='b',x=0.52,y=0.51)
    ax[0][0].plot(x2,y_true_2,'b')
    ax[0][1].plot(x2,y10_2,'r')
    ax[0][1].plot(x2,y_true_2,'b')
    ax[1][0].plot(x2,y16_2,'r')
    ax[1][0].plot(x2,y_true_2,'b')
    ax[1][1].plot(x2,y20_2,'r',label='Lagrange Polynomial')
    ax[1][1].plot(x2,y_true_2,'b',label='objtive function')
    ax[0][0].set_title('objfun',fontsize=9,color='r')
    ax[0][1].set_title('n=10',fontsize=9,color='r')
    ax[1][0].set_title('n=16',fontsize=9,color='r')
    ax[1][1].set_title('n=20',fontsize=9,color='r')
    plt.legend()
    plt.show()

    print()
    print('y=x/(1+x**4), x in [-5,5], when x = 0.5:')
    print()
    print('n   f(0.5)  L_n(0.5)   error')
    f2=objfun2(0.5)
    L10_2=Lagrange_Interpolation_Polynomial(0.5,data10_2)
    L16_2=Lagrange_Interpolation_Polynomial(0.5,data16_2)
    L20_2=Lagrange_Interpolation_Polynomial(0.5,data20_2)
    print('---------------------------------')
    print(10,'%.3e' % f2, '%.3e' % L10_2,'%.3e' % abs(f2-L10_2))
    print('---------------------------------')
    print(16,'%.3e' % f2,'%.3e' % L16_2,'%.3e' % abs(f2-L16_2))
    print('---------------------------------')
    print(20,'%.3e' % f2,'%.3e' % L20_2,'%.3e' % abs(f2-L20_2))
    print('---------------------------------')


    #4.y=arctanx x in [-5,5]
    data10_3=equidistant_nodes(-5,5,10,3)
    data16_3=equidistant_nodes(-5,5,16,3)
    data20_3=equidistant_nodes(-5,5,20,3)
    x3=np.arange(-5,5.01,0.01)
    y10_3=Lagrange_Interpolation_Polynomial(x3,data10_3)
    y16_3=Lagrange_Interpolation_Polynomial(x3,data16_3)
    y20_3=Lagrange_Interpolation_Polynomial(x3,data20_3)
    y_true_3=objfun3(x3)

    f, ax = plt.subplots(2, 2)
    plt.tight_layout() 
    f.suptitle('y=arctanx, x in [-5,5]',fontsize=9,color='b',x=0.52,y=0.51)
    ax[0][0].plot(x3,y_true_3,'b')
    ax[0][1].plot(x3,y10_3,'r')
    ax[0][1].plot(x3,y_true_3,'b')
    ax[1][0].plot(x3,y16_3,'r')
    ax[1][0].plot(x3,y_true_3,'b')
    ax[1][1].plot(x3,y20_3,'r',label='Lagrange Polynomial')
    ax[1][1].plot(x3,y_true_3,'b',label='objtive function')
    ax[0][0].set_title('objfun',fontsize=9,color='r')
    ax[0][1].set_title('n=10',fontsize=9,color='r')
    ax[1][0].set_title('n=16',fontsize=9,color='r')
    ax[1][1].set_title('n=20',fontsize=9,color='r')
    plt.legend()
    plt.show()

    print()
    print('y=arctanx, x in [-5,5], when x = 0.5:')
    print()
    print('n   f(0.5)  L_n(0.5)   error')
    f3=objfun3(0.5)
    L10_3=Lagrange_Interpolation_Polynomial(0.5,data10_3)
    L16_3=Lagrange_Interpolation_Polynomial(0.5,data16_3)
    L20_3=Lagrange_Interpolation_Polynomial(0.5,data20_3)
    print('---------------------------------')
    print(10,'%.3e' % f3, '%.3e' % L10_3,'%.3e' % abs(f3-L10_3))
    print('---------------------------------')
    print(16,'%.3e' % f3,'%.3e' % L16_3,'%.3e' % abs(f3-L16_3))
    print('---------------------------------')
    print(20,'%.3e' % f3,'%.3e' % L20_3,'%.3e' % abs(f3-L20_3))
    print('---------------------------------')


if __name__ == '__main__':
    main()